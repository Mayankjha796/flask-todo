name: Deploy Flask App to AWS ECR

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG::7}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG::7}

      - name: Update ECS service
        env:
          CLUSTER_NAME: my-flask-app-cluster
          SERVICE_NAME: my-flask-app-service
          TASK_FAMILY: my-flask-app-task
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)

          # Get current task definition
          aws ecs describe-task-definition --task-definition $TASK_FAMILY \
            --query taskDefinition > task-def.json

          # Remove fields that cannot be reused
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities)' task-def.json > new-task-def.json

          # Update ONLY the flask container's image
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" '
            .containerDefinitions |= map(
              if .name == "my-flask-app" then .image = $IMAGE else . end
            )
          ' new-task-def.json > final-task-def.json

          # Register new task definition revision
          REVISION=$(aws ecs register-task-definition \
            --cli-input-json file://final-task-def.json \
            --query 'taskDefinition.revision' --output text)

          echo "New task revision: $REVISION"

          # Update service with new revision
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $TASK_FAMILY:$REVISION \
            --force-new-deployment
